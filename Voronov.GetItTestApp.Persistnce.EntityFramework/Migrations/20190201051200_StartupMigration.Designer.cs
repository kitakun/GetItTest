// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Voronov.GetItTestApp.Persistnce.EntityFramework;

namespace Voronov.GetItTestApp.Persistence.EntityFramework.Migrations
{
    [DbContext(typeof(EntityFrameworkContext))]
    [Migration("20190201051200_StartupMigration")]
    partial class StartupMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Voronov.GetItTestApp.Core.Model.ErrorChangeRecord", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<int>("Action");

                    b.Property<int>("ChangedById");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("Date");

                    b.Property<int>("ErrorRecordId");

                    b.HasKey("Id");

                    b.HasIndex("ChangedById");

                    b.HasIndex("ErrorRecordId");

                    b.ToTable("ErrorChangeRecords");

                    b.HasData(
                        new { Id = -1, Action = 0, ChangedById = -1, Comment = "Temp Comment", Date = new DateTime(2019, 1, 31, 12, 12, 0, 298, DateTimeKind.Local), ErrorRecordId = -1 },
                        new { Id = -2, Action = 0, ChangedById = -1, Comment = "Temp Comment", Date = new DateTime(2019, 1, 30, 12, 12, 0, 298, DateTimeKind.Local), ErrorRecordId = -2 },
                        new { Id = -3, Action = 0, ChangedById = -1, Comment = "Temp Comment", Date = new DateTime(2019, 1, 29, 12, 12, 0, 298, DateTimeKind.Local), ErrorRecordId = -3 },
                        new { Id = -4, Action = 0, ChangedById = -1, Comment = "Temp Comment", Date = new DateTime(2019, 1, 28, 12, 12, 0, 298, DateTimeKind.Local), ErrorRecordId = -4 },
                        new { Id = -5, Action = 0, ChangedById = -1, Comment = "Temp Comment", Date = new DateTime(2019, 1, 27, 12, 12, 0, 298, DateTimeKind.Local), ErrorRecordId = -5 },
                        new { Id = -6, Action = 0, ChangedById = -1, Comment = "Temp Comment", Date = new DateTime(2019, 1, 26, 12, 12, 0, 298, DateTimeKind.Local), ErrorRecordId = -6 },
                        new { Id = -7, Action = 0, ChangedById = -1, Comment = "Temp Comment", Date = new DateTime(2019, 1, 25, 12, 12, 0, 298, DateTimeKind.Local), ErrorRecordId = -7 },
                        new { Id = -8, Action = 0, ChangedById = -1, Comment = "Temp Comment", Date = new DateTime(2019, 1, 24, 12, 12, 0, 298, DateTimeKind.Local), ErrorRecordId = -8 },
                        new { Id = -9, Action = 0, ChangedById = -1, Comment = "Temp Comment", Date = new DateTime(2019, 1, 23, 12, 12, 0, 298, DateTimeKind.Local), ErrorRecordId = -9 }
                    );
                });

            modelBuilder.Entity("Voronov.GetItTestApp.Core.Model.ErrorRecord", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("FullDescription");

                    b.Property<int>("ImportanceType");

                    b.Property<DateTime>("InputDate");

                    b.Property<string>("ShortDescription");

                    b.Property<int>("Status");

                    b.Property<int>("Urgency");

                    b.HasKey("Id");

                    b.ToTable("ErrorRecords");

                    b.HasData(
                        new { Id = -1, FullDescription = "side bar 1 side bar side bar side bar 1 side bar side bar side bar1  side bar ", ImportanceType = 0, InputDate = new DateTime(2019, 2, 1, 12, 13, 0, 299, DateTimeKind.Local), ShortDescription = "side bar 1 ...", Status = 0, Urgency = 0 },
                        new { Id = -2, FullDescription = "side bar 2 side bar side bar side bar 2 side bar side bar side bar2  side bar ", ImportanceType = 0, InputDate = new DateTime(2019, 2, 1, 12, 14, 0, 299, DateTimeKind.Local), ShortDescription = "side bar 2 ...", Status = 0, Urgency = 0 },
                        new { Id = -3, FullDescription = "side bar 3 side bar side bar side bar 3 side bar side bar side bar3  side bar ", ImportanceType = 0, InputDate = new DateTime(2019, 2, 1, 12, 15, 0, 299, DateTimeKind.Local), ShortDescription = "side bar 3 ...", Status = 0, Urgency = 0 },
                        new { Id = -4, FullDescription = "side bar 4 side bar side bar side bar 4 side bar side bar side bar4  side bar ", ImportanceType = 0, InputDate = new DateTime(2019, 2, 1, 12, 16, 0, 299, DateTimeKind.Local), ShortDescription = "side bar 4 ...", Status = 0, Urgency = 0 },
                        new { Id = -5, FullDescription = "side bar 5 side bar side bar side bar 5 side bar side bar side bar5  side bar ", ImportanceType = 0, InputDate = new DateTime(2019, 2, 1, 12, 17, 0, 299, DateTimeKind.Local), ShortDescription = "side bar 5 ...", Status = 0, Urgency = 0 },
                        new { Id = -6, FullDescription = "side bar 6 side bar side bar side bar 6 side bar side bar side bar6  side bar ", ImportanceType = 0, InputDate = new DateTime(2019, 2, 1, 12, 18, 0, 299, DateTimeKind.Local), ShortDescription = "side bar 6 ...", Status = 0, Urgency = 0 },
                        new { Id = -7, FullDescription = "side bar 7 side bar side bar side bar 7 side bar side bar side bar7  side bar ", ImportanceType = 0, InputDate = new DateTime(2019, 2, 1, 12, 19, 0, 299, DateTimeKind.Local), ShortDescription = "side bar 7 ...", Status = 0, Urgency = 0 },
                        new { Id = -8, FullDescription = "side bar 8 side bar side bar side bar 8 side bar side bar side bar8  side bar ", ImportanceType = 0, InputDate = new DateTime(2019, 2, 1, 12, 20, 0, 299, DateTimeKind.Local), ShortDescription = "side bar 8 ...", Status = 0, Urgency = 0 },
                        new { Id = -9, FullDescription = "side bar 9 side bar side bar side bar 9 side bar side bar side bar9  side bar ", ImportanceType = 0, InputDate = new DateTime(2019, 2, 1, 12, 21, 0, 299, DateTimeKind.Local), ShortDescription = "side bar 9 ...", Status = 0, Urgency = 0 }
                    );
                });

            modelBuilder.Entity("Voronov.GetItTestApp.Core.Model.User", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn);

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Login");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new { Id = -1, FirstName = "SuperUser", LastName = "Wabwabwba", Login = "admin", Password = "adm" },
                        new { Id = -2, FirstName = "Kesha", LastName = "Karpik", Login = "ksh", Password = "ksh" },
                        new { Id = -3, FirstName = "Zegerman", LastName = "Underfatch", Login = "zg", Password = "zg" }
                    );
                });

            modelBuilder.Entity("Voronov.GetItTestApp.Core.Model.ErrorChangeRecord", b =>
                {
                    b.HasOne("Voronov.GetItTestApp.Core.Model.User", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voronov.GetItTestApp.Core.Model.ErrorRecord", "ErrorRecord")
                        .WithMany("Changes")
                        .HasForeignKey("ErrorRecordId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
